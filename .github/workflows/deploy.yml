
name: Deploy Monitoring Stack to Production

on:
  workflow_dispatch:


jobs:
  # ================
  # デプロイフェーズ
  # ================
  deploy:
    needs: validate-configs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Update and Install rsync
        if: ${{ !env.ACT }}
        run: |
          sudo apt-get update && sudo apt-get install -y rsync

      # ===============================================================
      # リポジトリを差分転送する（転送する前に不要なファイルは除外する）
      # ===============================================================
      - name: Copy files to server (via diff)
        if: ${{ !env.ACT }}
        run: |
          echo 'ディレクトリの確認'
          ls -la ./
          echo "${{ secrets.SSH_KEY }}" > private_key && chmod 600 private_key
          rsync -avz --exclude-from=.rsyncignore --exclude=private_key -e 'ssh -o StrictHostKeyChecking=no -i private_key -p ${{ secrets.SSH_PORT }}' ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_DOMAIN }}:/home/${{ secrets.SSH_USER }}/monitoring-tools
          rm -f private_key
          
        # uses: appleboy/ssh-action@master
        # with:
        #   key: ${{ secrets.SSH_KEY }}
        #   port: ${{ secrets.SSH_PORT }}
        #   username: ${{ secrets.SSH_USER }}
        #   host: ${{ secrets.SSH_DOMAIN }}
        #   # source: "."
        #   # target: "/home/${{ secrets.SSH_USER }}/monitoring-tools"
        #   script: |
        #     echo 'ディレクトリの確認'
        #     ls -la ./
        #     rsync -avz --exclude-from='.rsyncignore' ./ /home/${{ secrets.SSH_USER }}/monitoring-tools

      # ==========================================
      # 更新されたファイルがcomposeかotherか判定する
      # ==========================================
      - name: Check changed files
        id: changes
        if: ${{ !env.ACT }}
        uses: dorny/paths-filter@v3
        with:
          filters: |
            compose:
              - 'compose.yml'
            # other:
              # - '**'

      # ================================================
      # compose以外のファイルが更新されたらリスタートする
      # ================================================
      - name: Restart Docker Compose (if other files changed)
        # if: ${{ !env.ACT && env.CHANGE_FILE == 'other' }}
        if: ${{ !env.ACT && steps.changes.outputs.compose != 'true' }}
        uses: appleboy/ssh-action@v0.1.6
        with:
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_DOMAIN }}
          script: |
            echo "Compose files: ${{ steps.chages.outputs.compose }}"
            cd ~/monitoring-tools
            echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose --profile prod restart
            echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose ps
      
      # ======================================
      # composeが更新されたらダウンして起動する
      # ======================================
      - name: Start Docker Compose (if compose.yml changed)
        # if: ${{ !env.ACT && env.CHANGE_FILE == 'compose' }}
        if: ${{ !env.ACT && steps.changes.outputs.compose == 'true' }}
        uses: appleboy/ssh-action@v0.1.6
        with:
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_DOMAIN }}
          script: |
            echo "Compose files: ${{ steps.chages.outputs.compose }}"
            cd ~/monitoring-tools
            echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose --profile prod down
            echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose --env-file ~/.env --profile prod up -d
            echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose ps
      
      # ====================
      # actでデプロイのテスト
      # ====================
      - name: Test Deploy
        if: ${{ env.ACT }}
        uses: appleboy/ssh-action@v0.1.6
        with:
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_DOMAIN }}
          script: |
            echo "Change file: ${{ env.CHANGE_FILE}}"
            ls monitoring-tools
            echo "${{ secrets.SUDO_PASS }}" | sudo -S docker ps

