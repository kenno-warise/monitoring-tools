# depends_onを使用して適切な起動順を指定 → まずprometheus、次にnode、その後grafana、最後にnginxが起動する。
# healthcheckを設定して、サービスが準備完了するまで次のコンテナを待機 → 例えば、Grafanaが完全に起動するまでNginxを待機させることで、リバースプロキシの失敗を防ぐ。
# ネットワークを明示的に指定 → すべてのコンテナがmynetworkというカスタムブリッジネットワーク上で動作する。
# これで、各コンテナが適切な順序で起動し、依存関係に基づいてスムーズに動作する。

services:
  prometheus:
    image: prom/prometheus:v3.4.0  # 5月24日時点で最新
    container_name: prometheus
    networks:  # カスタムブリッジネットワーク。
      - mynetwork
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=30d"  # 30日間保持
      - "--storage.tsdb.retention.size=2GB"  # 最大2GBまで保存
    restart: unless-stopped  # 再起動ポリシーでunless-stoppedに設定。手動で停止しない限り再起動する。
    healthcheck:  # コンテナが立ち上がったかチェック。
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090"]
      interval: 10s
      timeout: 5s
      retries: 3

  node:  # node-expoter公式ドキュメントの設定（network_modeの部分だけカスタムネットワークに変更）。
    image: quay.io/prometheus/node-exporter:v1.9.1  # 5月24日時点で最新
    container_name: node
    networks:  # カスタムブリッジネットワーク。
      - mynetwork
    pid: host  # ホストOSのプロセスID (PID) 名前空間をコンテナと共有
    cap_drop:
      - SYS_PTRACE  # ホストのプロセスを操作する機能を禁止
      - SYS_ADMIN  # システム管理機能の禁止
    volumes:
      - '/:/host:ro,rslave'
    command:
      - "--path.rootfs=/host"
    restart: unless-stopped  # 再起動ポリシーでunless-stoppedに設定。手動で停止しない限り再起動する。
    healthcheck:  # コンテナが立ち上がったかチェック。
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9100"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:  # 依存関係のコンテナを設定。
      prometheus:
        condition: service_healthy
  
  grafana:
    image: grafana/grafana-oss:12.0.1  # 5月24日時点で最新
    container_name: grafana
    networks:  # カスタムブリッジネットワーク。
      - mynetwork
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
        # 本番環境では権限の関係でエラーとなりコンテナが立ち上がらないのでボリュームマウントを作成するといいらしい。
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}
      - GF_LOG_LEVEL=warn
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=${GF_SMTP_USER}
      - GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${GF_SMTP_USER}
      - GF_SMTP_SKIP_VERIFY=true
    # 再起動ポリシーでunless-stoppedに設定。手動で停止しない限り再起動する。
    restart: unless-stopped  
    healthcheck:  # コンテナが立ち上がったかチェック。
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:  # 依存関係のコンテナを設定。
      prometheus:
        condition: service_healthy
      node:
        condition: service_healthy

  dev-nginx:
    profiles:
      - dev
    image: nginx:1.28.0  # 5月24日時点で最新
    container_name: dev-nginx
    networks:  # カスタムブリッジネットワーク。
      - mynetwork
    volumes:
      - ./secret/ssl:/etc/ssl
      - ./secret/.htpasswd:/etc/nginx/.htpasswd
      - ./nginx/conf.d/dev.conf:/etc/nginx/conf.d/dev.conf
    ports:
      - "80:80"
      - "443:443"
    # 'daemon of'はNginxをフォアグラウンドで実行する（コンテナプロセスが終了しないように）。   
    command: ["sh", "-c", "rm -f /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"]
    restart: unless-stopped  # 再起動ポリシーでunless-stoppedに設定。手動で停止しない限り再起動する。
    depends_on:  # 依存関係のコンテナを設定。
      grafana:
        condition: service_healthy
  
  # ===================
  # prod-nginxとdev-nginxとの相違点
  #
  #  - container_name
  #  - volumes: envsubstでテンプレートファイルを読み込む設定
  #  - ports: ホスト側で80番と443番が使用済みなので8080番と8443番を適用
  #  - environment: .envファイルによる環境変数の適用
  # ===================
  prod-nginx:
    profiles:
      - prod
    image: nginx:1.28.0  # 5月24日時点で最新
    container_name: prod-nginx
    networks:  # カスタムブリッジネットワーク。
      - mynetwork
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www:/var/www  # Let's Encryptの証明書を配置するディレクトリとBacik認証ファイル
      - ./nginx/templates:/etc/nginx/templates  # 本番環境用の設定ファイル
    ports:  # ホスト側のポートで80番443番が使用済みなので8080と8443で割り当て
      - "8080:80" 
      - "8443:443"
    environment: # nginx/templates/...に渡される環境変数
      - IP_ADDRESS=${IP_ADDRESS}
      - FREE_DOMAIN=${FREE_DOMAIN}
      - DOMAIN=${DOMAIN}
      - TARGET_IP=${TARGET_IP}
    restart: unless-stopped  # 再起動ポリシーでunless-stoppedに設定。手動で停止しない限り再起動する。
    depends_on:  # 依存関係のコンテナを設定。
      grafana:
        condition: service_healthy
          
volumes:
  grafana_data:
  prometheus_data:

networks:  # カスタムブリッジネットワークの作成。
  mynetwork:
    driver: bridge

